// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  username         String          @unique
  avatar           String          @default("")
  banner           String          @default("")
  displayname      String          @default("")
  description      String          @default("") @db.VarChar(1000)
  posts            Post[]
  likes            Like[]
  reposts          Repost[]
  followers        Follow[]        @relation(name: "FollowingUser")
  following        Follow[]        @relation(name: "FollowerUser")
  notifications    Notification[]  @relation(name: "NotificationTo")
  notificationsOut Notification[]  @relation(name: "NotificationFrom")
  directs          Direct[]
  directMessages   DirectMessage[]
  bookmarks        Bookmark[]
}

model Notification {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  type      NotificationType @default(FOLLOW)
  from      User             @relation(fields: [fromId], references: [id], name: "NotificationFrom")
  fromId    Int
  to        User             @relation(fields: [toId], references: [id], name: "NotificationTo")
  toId      Int
  read      Boolean          @default(false)
  post      Post?            @relation(fields: [postId], references: [id])
  postId    Int?
}

model Direct {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  members   User[]
  messages  DirectMessage[]
}

model DirectMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  content   String
  direct    Direct   @relation(fields: [directId], references: [id])
  userId    Int
  directId  Int
}

model Post {
  id           Int            @id @default(autoincrement())
  content      String?
  author       User           @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime       @default(now())
  likes        Like[]
  reposts      Repost[]
  notification Notification[]
  image        String?
  bookmarks    Bookmark[]
  reply        Post?          @relation("ReplyReplies", fields: [replyId], references: [id])
  replyId      Int?
  replies      Post[]         @relation("ReplyReplies")
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  userId Int
  postId Int
}

model Like {
  id       Int  @id @default(autoincrement())
  author   User @relation(fields: [authorId], references: [id])
  authorId Int
  post     Post @relation(fields: [postId], references: [id])
  postId   Int
}

model Repost {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation(fields: [followerId], references: [id], name: "FollowerUser")
  followerId  Int
  following   User @relation(fields: [followingId], references: [id], name: "FollowingUser")
  followingId Int
}

enum NotificationType {
  LIKE
  REPOST
  FOLLOW
}
